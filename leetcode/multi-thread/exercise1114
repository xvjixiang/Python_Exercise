import threading
class Foo:
    def __init__(self):
        self.thread_lock1 = threading.Lock()
        self.thread_lock1.acquire()
        self.thread_lock2 = threading.Lock()
        self.thread_lock2.acquire()
        # self.t = 0


    def first(self, printFirst: 'Callable[[], None]') -> None:
        # printFirst() outputs "first". Do not change or remove this line.
        printFirst()
        # self.t = 1
        self.thread_lock1.release()

    def second(self, printSecond: 'Callable[[], None]') -> None:
        # printSecond() outputs "second". Do not change or remove this line.
        self.thread_lock1.acquire()
        printSecond()
        self.thread_lock2.release()
        # self.thread_lock2.release()

    def third(self, printThird: 'Callable[[], None]') -> None:
        # printThird() outputs "third". Do not change or remove this line.
        self.thread_lock2.acquire()
        printThird()
